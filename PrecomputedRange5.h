//  Copyright (c) 2017 Joshua Scoggins
//
//  This software is provided 'as-is', without any express or implied
//  warranty. In no event will the authors be held liable for any damages
//  arising from the use of this software.  //
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//
//  1. The origin of this software must not be misrepresented; you must not
//     claim that you wrote the original software. If you use this software
//     in a product, an acknowledgment in the product documentation would be
//     appreciated but is not required.
//  2. Altered source versions must be plainly marked as such, and must not be
//     misrepresented as being the original software.
//  3. This notice may not be removed or altered from any source distribution.
#ifndef PRECOMPUTED_RANGE5_H__
#define PRECOMPUTED_RANGE5_H__

#include "qlib.h"
#include "Triple.h"

constexpr auto digits5Width = 572;
Triple range5[digits5Width];
// observations for five digit numbers!
u64 collection5[digits5Width] = {
22272, 22336, 22368, 22432, 22464, 22496, 22624,
22688, 22784, 22848, 22944, 22976, 23232, 23264,
23296, 23328, 23392, 23424, 23488, 23648, 23744,
23776, 23872, 23936, 23968, 24224, 24288, 24384,
24448, 24672, 24736, 24768, 24832, 24864, 24896,
24928, 24992, 26272, 26336, 26368, 26432, 26464,
26496, 26624, 26688, 26784, 26848, 26944, 26976,
27232, 27264, 27296, 27328, 27392, 27424, 27488,
27648, 27744, 27776, 27872, 27936, 27968, 28224,
28288, 28384, 28448, 28672, 28736, 28768, 28832,
28864, 28896, 28928, 28992, 29248, 29344, 29376,
29472, 29632, 29664, 29696, 29728, 29792, 29824,
29888, 29984, 32224, 32288, 32384, 32448, 32672,
32736, 32768, 32832, 32864, 32896, 32928, 32992,
33232, 33248, 33344, 33376, 33472, 33632, 33664,
33696, 33728, 33792, 33824, 33888, 33984, 34272,
34336, 34368, 34432, 34464, 34496, 34624, 34688,
34784, 34944, 34976, 36224, 36288, 36384, 36448,
36672, 36736, 36768, 36832, 36864, 36896, 36928,
36992, 37248, 37344, 37376, 37472, 37632, 37664,
37696, 37728, 37792, 37824, 37888, 37984, 38272,
38336, 38368, 38432, 38464, 38496, 38624, 38688,
38784, 38848, 38944, 38976, 39232, 39264, 39296,
39328, 39392, 39424, 39488, 39648, 39744, 39776,
39872, 39936, 39968, 42272, 42336, 42368, 42432,
42464, 42496, 42624, 42688, 42784, 42848, 42944,
42976, 43232, 43264, 43296, 43328, 43392, 43424,
43488, 43648, 43744, 43776, 43872, 43936, 43968,
44224, 44288, 44384, 44448, 44672, 44736, 44768,
44832, 44864, 44896, 44928, 44992, 46272, 46336,
46368, 46432, 46464, 46496, 46624, 46688, 46784,
46848, 46944, 46976, 47232, 47264, 47296, 47328,
47392, 47424, 47488, 47648, 47744, 47776, 47872,
47936, 48224, 48288, 48384, 48448, 48672, 48736,
48768, 48832, 48864, 48896, 48928, 48992, 49248,
49344, 49376, 49472, 49632, 49664, 49728, 49792,
49824, 49984, 62272, 62336, 62368, 62432, 62464,
62496, 62624, 62688, 62784, 62848, 62944, 62976,
63232, 63264, 63296, 63328, 63392, 63424, 63488,
63648, 63744, 63776, 63872, 63936, 63968, 64224,
64288, 64384, 64448, 64672, 64736, 64768, 64832,
64864, 64896, 64928, 64992, 66272, 66336, 66368,
66432, 66464, 66496, 66624, 66688, 66784, 66848,
66944, 66976, 67232, 67264, 67296, 67328, 67392,
67424, 67488, 67648, 67744, 67776, 67872, 67936,
67968, 68224, 68288, 68384, 68448, 68672, 68736,
68832, 68864, 68896, 68928, 68992, 69248, 69344,
69376, 69472, 69632, 69664, 69728, 69792, 69824,
69888, 69984, 72224, 72288, 72384, 72448, 72672,
72736, 72768, 72832, 72864, 72896, 72928, 72992,
73248, 73344, 73376, 73472, 73632, 73664, 73696,
73728, 73792, 73824, 73888, 73984, 74272, 74336,
74368, 74432, 74464, 74496, 74624, 74688, 74784,
74944, 74976, 76224, 76288, 76384, 76448, 76672,
76736, 76768, 76832, 76864, 76896, 76928, 76992,
77248, 77344, 77376, 77472, 77632, 77664, 77696,
77728, 77824, 77984, 78272, 78336, 78368, 78432,
78464, 78496, 78624, 78784, 78848, 78944, 78976,
79232, 79264, 79296, 79328, 79392, 79424, 79488,
79648, 79744, 79776, 79872, 79936, 82272, 82336,
82368, 82432, 82464, 82496, 82624, 82688, 82784,
82848, 82944, 82976, 83232, 83264, 83296, 83328,
83392, 83424, 83488, 83648, 83744, 83776, 83872,
83936, 83968, 84224, 84288, 84384, 84448, 84672,
84736, 84768, 84832, 84864, 84896, 84928, 84992,
86272, 86336, 86432, 86464, 86496, 86624, 86784,
86848, 86944, 86976, 87232, 87264, 87296, 87328,
87392, 87424, 87488, 87648, 87744, 87776, 87872,
87936, 88224, 88384, 88448, 88672, 88736, 88768,
88832, 88864, 88896, 88992, 89248, 89344, 89376,
89472, 89632, 89664, 89696, 89728, 89792, 89824,
89984, 92224, 92288, 92384, 92448, 92672, 92736,
92768, 92832, 92864, 92928, 92992, 93248, 93344,
93376, 93392, 93472, 93632, 93664, 93696, 93728,
93792, 93824, 93888, 93984, 94272, 94336, 94368,
94432, 94464, 94496, 94624, 94688, 94784, 94848,
94944, 94976, 96224, 96288, 96384, 96448, 96672,
96736, 96768, 96832, 96864, 96896, 96928, 97248,
97344, 97376, 97472, 97632, 97664, 97728, 97792,
97824, 97984, 98272, 98336, 98368, 98432, 98464,
98496, 98624, 98848, 98944, 99232, 99264, 99328,
99392, 99424, 99648, 99744, 99936,
};

inline void setupPrecomputedWidth5() {
	for (int i = 0; i < digits5Width; ++i) {
		auto number = collection5[i];
		auto digits0 = number % 10;
		auto digits1 = (number / 10) % 10;
		auto digits2 = (number / 100) % 10;
		auto digits3 = (number / 1000) % 10;
		auto digits4 = (number / 10000) % 10;
		auto sum = digits0 + digits1 + digits2 + digits3 + digits4;
		auto product = digits0 * digits1 * digits2 * digits3 * digits4;
        range5[i].assume(sum, product, number);
	}
}
#endif
